A very hard mathematic problem

Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)
Total Submission(s): 2581    Accepted Submission(s): 747


Problem Description
　　Haoren is very good at solving mathematic problems. Today he is working a problem like this: 
　　Find three positive integers X, Y and Z (X < Y, Z > 1) that holds
　　 X^Z + Y^Z + XYZ = K
　　where K is another given integer.
　　Here the operator “^” means power, e.g., 2^3 = 2 * 2 * 2.
　　Finding a solution is quite easy to Haoren. Now he wants to challenge more: What’s the total number of different solutions?
　　Surprisingly, he is unable to solve this one. It seems that it’s really a very hard mathematic problem.
　　Now, it’s your turn.
 

Input
　　There are multiple test cases. 
　　For each case, there is only one integer K (0 < K < 2^31) in a line.
　　K = 0 implies the end of input.
　　
 

Output
　　Output the total number of solutions in a line for each test case.
 

Sample Input
9
53
6
0
 

Sample Output
1
1
0
　　
Hint

9 = 1^2 + 2^2 + 1 * 2 * 2
53 = 2^3 + 3^3 + 2 * 3 * 3
 
 

Source
2012 ACM/ICPC Asia Regional Tianjin Online
 

Recommend
liuyiding

思路：枚举y和次数z然后二分查找是否有符合条件的x出现y*y<2^31 z增加值将是指数上涨所以时间复杂度为，log(k)*log(k)*sqrt(k)

#include<iostream>
#include<cstring>
using namespace std;
const int mm=1000;
long long yz;
bool ok(long long z,long long y,long long k)
{
  long long l=1,r=y-1,mid,xx,sum;
  while(l<=r)
  {
    mid=(l+r)/2;
    xx=1;
    for(int i=0;i<z;i++)
      xx*=mid;
    sum=xx+mid*yz;
    if(sum==k)return 1;
    else if(sum<k)l=mid+1;
    else r=mid-1;
  }
  return 0;
}
int main()
{ long long k,x,y,z,ans;
  while(cin>>k&&k)
  {
    ans=0;x=1;y=2;z=2;
    ///枚举y和次数z
    for(y=2;y*y<=k;y++)
      for(z=2;;z++)
    { 
      long long yy=1;
      for(int i=0;i<z;i++)
        yy*=y;
      if(yy>k)
        break;
      yz=y*z;
      ///y,z确定，二分查找是否有符合条件的x出现
      if(ok(z,y,k-yy))ans++;
    }
    cout<<ans<<"\n";
  }
}




