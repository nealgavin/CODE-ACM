find the most comfortable road

Time Limit: 1000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)
Total Submission(s): 1864    Accepted Submission(s): 779


Problem Description
XX星有许多城市，城市之间通过一种奇怪的高速公路SARS(Super Air Roam Structure---超级空中漫游结构）进行交流，每条SARS都对行驶在上面的Flycar限制了固定的Speed，同时XX星人对 Flycar的“舒适度”有特殊要求，即乘坐过程中最高速度与最低速度的差越小乘坐越舒服 ,(理解为SARS的限速要求，flycar必须瞬间提速/降速，痛苦呀 ),
但XX星人对时间却没那么多要求。要你找出一条城市间的最舒适的路径。(SARS是双向的）。
 

Input
输入包括多个测试实例，每个实例包括：
第一行有2个正整数n (1<n<=200)和m (m<=1000),表示有N个城市和M条SARS。
接下来的行是三个正整数StartCity,EndCity,speed,表示从表面上看StartCity到EndCity,限速为speedSARS。speed<=1000000
然后是一个正整数Q（Q<11),表示寻路的个数。
接下来Q行每行有2个正整数Start,End, 表示寻路的起终点。
 

Output
每个寻路要求打印一行，仅输出一个非负整数表示最佳路线的舒适度最高速与最低速的差。如果起点和终点不能到达，那么输出-1。
 

Sample Input
4 4
1 2 2
2 3 4
1 4 1
3 4 2
2
1 3
1 2
 

Sample Output
1
0
 

Author
ailyanlu
 

Source
HDU 2007-Spring Programming Contest - Warm Up （1）
 

Recommend
8600

思路：先sort 下，然后枚举。因为sort完后只要找到ab的最小区间就是答案。

#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
const int mm=209;
const int oo=1e9;
class node
{
public:
  int u,v,c;
}e[1100];
int n,m,q;
int a,b,c;
int root[mm],ran[mm];
bool cmp(node x,node y)
{
  return x.c<y.c;
}
void data_set()
{
  for(int i=0;i<=n;i++)
    root[i]=i,ran[i]=1;
}
int look(int x)
{
  if(x^root[x])root[x]=look(root[x]);
  return root[x];
}
void uni(int x,int y)
{
  x=look(x);y=look(y);
  if(ran[x]>ran[y])root[y]=x,ran[x]+=ran[y];
  else root[x]=y,ran[y]+=ran[x];
}
int main()
{
  while(cin>>n>>m)
  {
    for(int i=0;i<m;i++)cin>>e[i].u>>e[i].v>>e[i].c;
    sort(e,e+m,cmp);
    cin>>q;int ans;
    for(int i=0;i<q;i++)
    {
      cin>>a>>b;ans=oo;
      for(int k=0;k<m;k++)
      {data_set();
        for(int j=k;j<m;j++)
        {
        uni(e[j].u,e[j].v);
        if(look(a)==look(b))
        { int z=e[j].c-e[k].c;
          ans=ans<z?ans:z;break;
        }
        }
      }
      if(ans^oo)cout<<ans<<"\n";
      else cout<<-1<<"\n";
    }
  }
}


