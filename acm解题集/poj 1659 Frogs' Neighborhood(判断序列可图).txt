
Frogs' Neighborhood
Time Limit: 5000MS	
Memory Limit: 10000K
Total Submissions: 5524	
Accepted: 2388	
Special Judge
Description
未名湖附近共有N个大小湖泊L1, L2, ..., Ln(其中包括未名湖)，每个湖泊Li里住着一只青蛙Fi(1 ≤ i ≤ N)。如果湖泊Li和Lj之间有水路相连，则青蛙Fi和Fj互称为邻居。现在已知每只青蛙的邻居数目x1, x2, ..., xn，请你给出每两个湖泊之间的相连关系。
Input
第一行是测试数据的组数T(0 ≤ T ≤ 20)。每组数据包括两行，第一行是整数N(2 < N < 10)，第二行是N个整数，x1, x2,..., xn(0 ≤ xi ≤ N)。
Output
对输入的每组测试数据，如果不存在可能的相连关系，输出"NO"。否则输出"YES"，并用N×N的矩阵表示湖泊间的相邻关系，即如果湖泊i与湖泊j之间有水路相连，则第i行的第j个数字为1，否则为0。每两个数字之间输出一个空格。如果存在多种可能，只需给出一种符合条件的情形。相邻两组测试数据之间输出一个空行。
Sample Input
3
7
4 3 1 5 4 2 1 
6
4 3 1 4 2 0 
6
2 3 1 1 2 1 
Sample Output
YES
0 1 0 1 1 0 1 
1 0 0 1 1 0 0 
0 0 0 1 0 0 0 
1 1 1 0 1 1 0 
1 1 0 1 0 1 0 
0 0 0 1 1 0 0 
1 0 0 0 0 0 0 

NO

YES
0 1 0 0 1 0 
1 0 0 1 1 0 
0 0 0 0 0 1 
0 1 0 0 0 0 
1 1 0 0 0 0 
0 0 1 0 0 0 
Source
POJ Monthly--2004.05.15 Alcyone@pku

思路：判断一个序列是否可图，Havel-Hakimi定理，只要将其从序列从大到小排序，如果是 a,b,c,d,e,f...然后将从中后面的a个序列中删除1也是可图的。

#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
const int mm=110;
int grap[mm][mm];
class node
{
  public: int id,num;
}f[mm];
bool cmp(node a,node b)
{
  return a.num>b.num;
}
int main()
{
  int cas;
  while(cin>>cas)
  {
    int n;
    while(cas--)
    { memset(grap,0,sizeof(grap));
      cin>>n;
      for(int i=0;i<n;i++)
       {
         cin>>f[i].num;
         f[i].id=i;
       }
       bool flag=1;
       for(int j=n;j>0&&flag;j--)
       {
         sort(f,f+n,cmp);
         int m=f[0].num,x=f[0].id;
         f[0].num=0;
         ///cout<<j<<" "<<m<<endl;
         for(int i=1;i<=m;i++)
          if(f[i].num){int y=f[i].id;f[i].num--;grap[x][y]=grap[y][x]=1;}
          else {flag=0;break;}
       }
       if(flag)
       {
         cout<<"YES\n";
         for(int i=0;i<n;i++,cout<<"\n")
          for(int j=0;j<n;j++)
          cout<<grap[i][j]<<" ";
       }
       else cout<<"NO\n";
       if(cas)
       cout<<"\n";
    }
  }
}


