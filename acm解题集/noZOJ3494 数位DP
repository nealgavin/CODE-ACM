#include<iostream>
#include<cstring>
#include<cstdio>
#include<queue>
#define FOR(i,a,b) for(int i=a;i<=b;++i)
#define clr(f,z) memset(f,z,sizeof(f))
#define LL long long
using namespace std;
const int mm=2013;
const int MOD=1000000009;
class AC
{
public://f 失败指针
  int ch[mm][2],f[mm];
  bool val[mm];
  int sz;
  AC()
  {
    sz=1;clr(ch[0],0);val[0]=0;
  }
  void clear()
  {
    sz=1;clr(ch[0],0);val[0]=0;
  }
  int idx(char x)
  {
    return x-'0';
  }
  void insert(char*s)
  {
    int u=0,c;
    for(int i=0;s[i];++i)
    {
      c=idx(s[i]);
      if(!ch[u][c])//add a node
      { val[sz]=0;
        clr(ch[sz],0);ch[u][c]=sz++;
      }
      u=ch[u][c];
    }
    val[u]=1;
  }
  void getFail()
  { int u=0,v,r;
    queue<int>Q;
    f[0]=0;
    FOR(i,0,1)
    if(ch[0][i])Q.push(ch[0][i]),f[ ch[0][i] ]=0;

    while(!Q.empty())
    {
      r=Q.front();Q.pop();
      FOR(c,0,1)
      {
        u=ch[r][c];
        if(!u){ ch[r][c]=ch[ f[r] ][c]; continue;}
        Q.push(u);
        v=f[r];
        while(v&&!ch[v][c])v=f[v];//从父节点找存在的FAIl
        f[u]=ch[v][c];
      }
    }
  }
  int bcd[mm][10];
  int chage(int fa,int num)
  {
    if(val[fa])return -1;
    int cur=fa;
    for(int i=3;i>=0;--i)
    {
      if(val[ ch[cur][(num>>i)&1] ])return -1;
      cur=ch[cur][ (num>>i)&1 ];
    }
    return cur;
  }
  void get_BCD()///从某节点开始的转移态
  {
    FOR(i,0,sz-1)
    FOR(j,0,9)
    bcd[i][j]=chage(i,j);
  }
  void BCD_out()
  {
    FOR(i,0,sz-1)
    FOR(j,0,9)
    printf("bcd=%d %d %d \n",i,j,bcd[i][j]);
  }
  LL dp[210][mm];int bit[210],pos;
  LL dfs(int pp,int s,bool big,bool nozero)
  {
    if(pp == 0)return 1;
    if(!big && dp[pp][s]!=-1)return dp[pp][s];
    LL ans = 0;
    if(nozero)
    {
        ans += dfs(pp-1,s,big && bit[pp]==0,true);
        ans %= MOD;
    }
    else
    {
        if(bcd[s][0]!=-1)ans += dfs(pp-1,bcd[s][0],big && bit[pp]==0,false);
        ans %= MOD;
    }
    int kn= big?bit[pp]:9;
    for(int i = 1;i<=kn;i++)
    {
        if(bcd[s][i]!=-1)
        {
            ans += dfs(pp-1,bcd[s][i],big&&i==kn,false);
            ans %=MOD;
        }
    }
    if(!big && !nozero)dp[pp][s] = ans;
    return ans;
  }
  LL get(char*s)
  { clr(dp,-1);
    pos=0;
    int len=strlen(s);

    for(int i=len-1;i>=0;--i)
    bit[++pos]=s[i]-'0';
    return dfs(pos,0,1,1);//DP(pos,0,0,0);
  }
}ac;
char s[222];
int main()
{
  int cas,n;
  while(~scanf("%d",&cas))
  {
    FOR(ca,1,cas)
    { ac.clear();
      scanf("%d",&n);
      FOR(i,1,n)
      {
        scanf("%s",s);
        ac.insert(s);
      }
      ac.getFail();
      ac.get_BCD();
      //ac.BCD_out();
      LL ans=0;
      scanf("%s",s);
      int len=strlen(s);
      for(int i=len-1;i>=0;--i)
        if(s[i]>'0'){--s[i];break;}
        else s[i]='9';
      //cout<<s<<endl;
      ans-=ac.get(s);
      scanf("%s",s);
      ans+=ac.get(s);
      printf("%I64d\n",ans);
    }
  }
}
/*********
long long dfs(int pos,int s,bool flag,bool z)
{
    if(pos == -1)return 1;
    if(!flag && dp[pos][s]!=-1)return dp[pos][s];
    long long ans = 0;
    if(z)
    {
        ans += dfs(pos-1,s,flag && bit[pos]==0,true);
        ans %= MOD;
    }
    else
    {
        if(bcd[s][0]!=-1)ans += dfs(pos-1,bcd[s][0],flag && bit[pos]==0,false);
        ans %= MOD;
    }
    int end = flag?bit[pos]:9;
    for(int i = 1;i<=end;i++)
    {
        if(bcd[s][i]!=-1)
        {
            ans += dfs(pos-1,bcd[s][i],flag&&i==end,false);
            ans %=MOD;
        }
    }
    if(!flag && !z)dp[pos][s] = ans;
    return ans;
}
*************************/
