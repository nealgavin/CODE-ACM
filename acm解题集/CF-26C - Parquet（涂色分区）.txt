C - Parquet
Time Limit:2000MS Memory Limit:262144KB 64bit IO Format:%I64d & %I64u
Submit Status Practice CodeForces 26C
Description
Once Bob decided to lay a parquet floor in his living room. The living room is of size n?×?m metres. Bob had planks of three types: a planks 1?×?2 meters, b planks 2?×?1 meters, and c planks 2?×?2 meters. Help Bob find out, if it is possible to parquet the living room with such a set of planks, and if it is possible, find one of the possible ways to do so. Bob doesn't have to use all the planks.
Input
The first input line contains 5 space-separated integer numbers n, m, a, b, c (1?≤?n,?m?≤?100,?0?≤?a,?b,?c?≤?104), n and m ― the living room dimensions, a, b and c ― amount of planks 1?×?2, 2?×?1 и 2?×?2 respectively. It's not allowed to turn the planks.
Output
If it is not possible to parquet the room with such a set of planks, output IMPOSSIBLE. Otherwise output one of the possible ways to parquet the room ― output n lines with m lower-case Latin letters each. Two squares with common sides should contain the same letters, if they belong to one and the same plank, and different letters otherwise. Different planks can be marked with one and the same letter (see examples). If the answer is not unique, output any.
Sample Input
Input
2 6 2 2 1
Output
aabcca
aabdda
Input
1 1 100 100 100
Output
IMPOSSIBLE
Input
4 4 10 10 10
Output
aabb
aabb
bbaa
bbaa

思路：奇数的行列先铺完然后再按2*2的铺满，剩下的其他补上然后就是涂色了。

#include<iostream>
#include<cstring>
using namespace std;
const int mm=110;
int f[mm][mm];
int n,m,a,b,c,pos;
bool vis[mm][mm];
bool A(int x,int y)///ABC分区
{
  if(y+1<m&&f[x][y+1]==0&&f[x][y]==0)
  {f[x][y]=f[x][y+1]=pos++;return 1; }
  return 0;
}
bool B(int x,int y)
{
  if(x+1<n&&f[x+1][y]==0&&f[x][y]==0)
  {
    f[x][y]=f[x+1][y]=pos++;return 1;
  }
  return 0;
}
bool C(int x,int y)
{ int z=f[x+1][y]+f[x][y+1]+f[x+1][y+1]+f[x][y];
  if(x+1<n&&y+1<m&&z==0)
  {
    f[x][y]=f[x+1][y]=f[x][y+1]=f[x+1][y+1]=pos++;
    return 1;
  }
  return 0;
}
bool check(int i,int j)
{ if(f[i][j]==0)return 0;
  int a=1;///就是这没给赋初值给WA了两次
  if(i>0)///判断有和此区域的上下左右一样的就a就加1对26模
  {a=(f[i-1][j]+1)%26;
   if(j+1<m&&f[i-1][j+1]==a)a=(a+1)%26;
   if(j+2<m&&vis[i][j+2]&&f[i][j+2]==a){a=(a+1)%26;}
  }
  if(j>0&&f[i][j-1]==a)
  {a=(a+1)%26;
    if(i+1<n&&f[i+1][j-1]==a)
      a=(a+1)%26;
  }

  if(i+1<n&&f[i+1][j]==f[i][j]){f[i+1][j]=a;vis[i+1][j]=1;}
  if(j+1<m&&f[i][j+1]==f[i][j]){f[i][j+1]=a;vis[i][j+1]=1;}
  if(i+1<n&&j+1<m&&f[i+1][j+1]==f[i][j]){f[i+1][j+1]=a;vis[i+1][j+1]=1;}
  vis[i][j]=1;
  f[i][j]=a;
  return 1;
}
int main()
{
  while(cin>>n>>m>>a>>b>>c)
  {
    pos=1;
    int x,y;
    memset(f,0,sizeof(f));
    memset(vis,0,sizeof(vis));
    for(int i=0;i<n;i++)///先用2X2的铺满至不能铺为止
    {
      for(int j=0;j<m;j++)
      {
        if(c&&C(i,j))
        {
          c--;x=i;y=j;
        }

      }
    }
    if(m&1)///是奇数行先把边界一行填了
    {
      for(int i=0;i<n;i++)
        if(b&&B(i,m-1))
        b--;
    }
    if(n&1)
    {
      for(int i=0;i<m;i++)
        if(a&&A(n-1,i))
        a--;
    }
     for(int i=0;i<n;i++)///再用1X2和2X1的把它填满
     {
      for(int j=0;j<m;j++)
      {
        if(a>1&&A(i,j)&&A(i+1,j))
        {
          a-=2;
        }
        if(b>1&&B(i,j)&&B(i,j+1))
        {
          b-=2;
        }
      }
     }
     bool flag=0;
    for(int i=0;i<n;i++)
      for(int j=0;j<m;j++)///涂色
    { //if(i>0&&f[i][j]==f[i-1][j])continue;
      //if(j>0&&f[i][j]==f[i][j-1])continue;
      if(vis[i][j])continue;
      if(check(i,j)==0)flag=1;
    }
    if(flag)
    {
      cout<<"IMPOSSIBLE\n";
      continue;
    }

    for(int i=0;i<n;i++)
    {
      for(int j=0;j<m;j++)
      {
        char s=f[i][j]%26+'a';
        cout<<s;
      }
      cout<<"\n";
    }

  }
}

这代码编的有点麻烦了，思路不好，这是别人的代码，思路是先全按2*2的铺满如果方块不够再修正一一涂色

char s[105][105];

int main()
{
    int a,b,c,n,m,i,j,r,l;
    char ch;
    while(cin >> n >> m >> a >> b >> c)
    {
        if(a*2+b*2+c*4 < n*m)
        {
            cout << "IMPOSSIBLE" << endl;
            continue;
        }
        if(n%2) a -= m/2;
        if(m%2) b -= n/2;
        if(m*n%2 || a<0 || b<0)
        {
            cout << "IMPOSSIBLE" << endl;
            continue;
        }
        for(i=0;i<n;i+=2)
            for(ch ='a'+i/2%2,j=0;j<m;j+=2)
            {
                s[i][j] = s[i][j+1] = s[i+1][j] = s[i+1][j+1] = ch;
                if(ch == 'a')
                ch++;
                else
                ch--;
            }
        c -= (n/2)*(m/2);
        for(i=0;i<n-n%2;i+=2)
            for(j=0;j<m-m%2;j+=2)
            if(c<0 && a>=2)
            {
                a -= 2;
                c++;
                s[i][j] = s[i][j+1] = s[i][j+1]+2;
            }
            else if(c<0 && b>=2)
            {
                b -= 2;
                c++;
                s[i][j] = s[i+1][j] = s[i+1][j]+2;
            }
        if(a<0||b<0||c<0)
        cout << "IMPOSSIBLE" << endl;
        else
        for(i=0;i<n;i++,cout << endl)
            for(j=0;j<m;j++)
            cout << s[i][j];
    }
    return 0;
}



