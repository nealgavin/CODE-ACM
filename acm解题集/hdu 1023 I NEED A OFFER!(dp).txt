I NEED A OFFER!

Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)
Total Submission(s): 10672    Accepted Submission(s): 4019




Problem Description

Speakless很早就想出国，现在他已经考完了所有需要的考试，准备了所有要准备的材料，于是，便需要去申请学校了。要申请国外的任何大学，你都要交纳一定的申请费用，这可是很惊人的。Speakless没有多少钱，总共只攒了n万美元。他将在m个学校中选择若干的（当然要在他的经济承受范围内）。每个学校都有不同的申请费用a（万美元），并且Speakless估计了他得到这个学校offer的可能性b。不同学校之间是否得到offer不会互相影响。“I NEED A OFFER”，他大叫一声。帮帮这个可怜的人吧，帮助他计算一下，他可以收到至少一份offer的最大概率。（如果Speakless选择了多个学校，得到任意一个学校的offer都可以）。


 




Input

输入有若干组数据，每组数据的第一行有两个正整数n,m(0<=n<=10000,0<=m<=10000) 
后面的m行，每行都有两个数据ai(整型),bi(实型)分别表示第i个学校的申请费用和可能拿到offer的概率。 
输入的最后有两个0。


 




Output

每组数据都对应一个输出，表示Speakless可能得到至少一份offer的最大概率。用百分数表示，精确到小数点后一位。


 




Sample Input

10 3
4 0.1
4 0.2
5 0.3
0 0
 




Sample Output

44.0%

Hint
You should use printf("%%") to print a '%'.
 
 




Author

Speakless

 




Source

Gardon-DYGG Contest 2 






Recommend

JGShining

思路：本题相当于求他不被录取的最小概率。

             dp[j]=min(dp[j+d[i].m]*d[i].x,dp[j]);就是在花费剩余j时不被录取的最小概率。
#include<iostream>
#include<iomanip>
#include<algorithm>
using namespace std;
const int mm=10010;
const float smin=0.000001;
bool vis[mm];
float dp[mm];
class node
{
  public:
  int m;
  float x;
}d[mm];
int main()
{ int n,cost;
  while(cin>>cost>>n)
  { if(cost==0&&n==0)break;
    for(int i=0;i<n;i++)
    {
      cin>>d[i].m>>d[i].x;
      d[i].x=1-d[i].x;
    }
    dp[cost]=1.0;
    float ans=1;
    for(int i=0;i<n;i++)
    {
      for(int j=0;j<=cost-d[i].m;j++)
      { if(dp[j]>smin)
        dp[j]=min(dp[j+d[i].m]*d[i].x,dp[j]);
        else dp[j]=dp[j+d[i].m]*d[i].x;
        if(dp[j]>smin&&dp[j]<ans)ans=dp[j];
      }
    }
    ans=1-ans;ans*=100;
    cout.setf(ios::fixed);
    cout<<setprecision(1)<<ans<<"%"<<"\n";
  }
}




