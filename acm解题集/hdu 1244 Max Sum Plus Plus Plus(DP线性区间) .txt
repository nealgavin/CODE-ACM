Max Sum Plus Plus Plus

Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)
Total Submission(s): 838    Accepted Submission(s): 417




Problem Description

给定一个由n个正整数组成的整数序列

a1 a2 a3 ... an

求按先后次序在其中取m段长度分别为l1、l2、l3...lm的不交叠的连续整数的和的最大值。


 




Input

第一行是一个整数n(0 ≤ n ≤ 1000)，n = 0表示输入结束
第二行的第一个数是m(1 ≤ m ≤ 20)，
第二行接下来有m个整数l1，l2...lm。
第三行是n个整数a1, a2, a2 ... an.


 




Output

输出m段整数和的最大值。


 




Sample Input

3
2 1 1
1 2 3
4
2 1 2
1 2 3 5
0
 




Sample Output

5
10
 




Author

JGShining（极光炫影）

 




Recommend

Ignatius.L

 

思路：dp[x][y]表示前y个分成符合要求的前x段的最优值。sum[a][b]表示a到b之间所有数的和

          dp[x][y]=max(dp[x-1][y-lenth]+sum[y-lenth][y],dp[x][y-1]);

空间得稍微优化下，sum[a][b]=sum[b]-sum[a];
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int mm=1004;
int sum[mm],len[mm],f[22][mm];
int n,m;
int main()
{
  while(cin>>n&&n)
  {
    cin>>m;
    for(int i=1;i<=m;i++)cin>>len[i];
    int z;cin>>sum[1];sum[0]=0;len[0]=0;
    for(int i=2;i<=n;i++){cin>>z;sum[i]=sum[i-1]+z;}
    memset(f,0,sizeof(f));
    int lenth=0;
    for(int i=1;i<=m;i++)
    { lenth+=len[i]; ///满足条件的最小长度
      for(int j=lenth;j<=n;j++)
        f[i][j]=max(f[i-1][j-len[i]]+sum[j]-sum[j-len[i]],f[i][j-1]);
    }
    cout<<f[m][n]<<"\n";
  }
}



