approach Angel 
Time Limit 1000ms Memory Limit 65536K 
 
description 
Angel was caught by the MOLIGPY! He was put in prison by Moligpy. The prison is described as a N * M (N, M <= 200) matrix. There are WALLs, ROADs, and GUARDs in the prison.

Angel's friends want to save Angel. Their task is: approach Angel. We assume that "approach Angel" is to get to the position where Angel stays. When there's a guard in the grid, we must kill him (or her?) to move into the grid. We assume that we moving up, down, right, left takes us 1 unit time, and killing a guard takes 1 unit time, too. And we are strong enough to kill all the guards.

You have to calculate the minimal time to approach Angel. (We can move only UP, DOWN, LEFT and RIGHT, to the neighbor grid within bound, of course.)

 
input 
First line contains two integers stand for N and M.

Then N lines follows, every line has M characters. "." stands for road, "a" stands for Angel, and "r" stands for each of Angel's friend. 

Process to the end of the file.
 
output 
For each test case, your program should output a single integer, standing for the minimal time needed. If such a number does no exist, you should output a line containing "Poor ANGEL has to stay in the prison all his life." 

 
sample_input 
7 8
#.#####.
#.a#..r.
#..#x...
..#..#.#
#...##..
.#......
........
 
sample_output 
13

 
hint 

 
source 

 

#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
#define N 205
#define MAX 99999999
using namespace std;
struct st
{
  int x,y,step;
};
st q[20004];
const int tx[]={0,0,1,-1};
const int ty[]={1,-1,0,0};
char map[N][N];
bool vis[N][N];
int m,n;
int ans;
void bfs(int x,int y)
{
  memset(vis,0,sizeof(vis));
  int front=1,rear=2;
  q[1].x=x;
  q[1].y=y;
  q[1].step=0;
  vis[x][y]=1;
  while(front<rear)
  {
    x=q[front].x;
    y=q[front].y;
    for(int z=0;z<4;z++)
    {
      int nx=x+tx[z];
      int ny=y+ty[z];
      if(nx>=0&&nx<m&&ny>=0&&ny<n&&!vis[nx][ny])
      {
        vis[nx][ny]=1;
        if(map[nx][ny]=='#')
        continue;
        if(map[nx][ny]=='.')
        {
          q[rear].step=q[front].step+1;
          q[rear].x=nx;
          q[rear].y=ny;
          rear++;
        }
        if(map[nx][ny]=='x')
        {
          q[rear].step=q[front].step+2;
          q[rear].x=nx;
          q[rear].y=ny;
          rear++;
        }
        if(map[nx][ny]=='r')
        {
          q[rear].step=q[front].step+1;
          ans=min(q[rear].step,ans);
        }
      }
    }
    front++;
  }
}
int main()
{
  int i,j,x,y;
  //freopen("1.txt","w",stdout);
    while(scanf("%d%d",&m,&n)!=EOF)
    {
    ans=MAX;
    for(i=0;i<m;i++)
    for(j=0;j<n;j++)
    cin>>map[i][j];
    for(i=0;i<m;i++)
    for(j=0;j<n;j++)
    if(map[i][j]=='a')
    {
      x=i;y=j;
      bfs(x,y);
    }
    if(ans!=MAX)
    printf("%d\n",ans);
    else
    printf("Poor ANGEL has to stay in the prison all his life.\n");

 }return 0;
}
