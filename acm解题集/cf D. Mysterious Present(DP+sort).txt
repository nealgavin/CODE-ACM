
D. Mysterious Present


time limit per test:
2 seconds

memory limit per test:
64 megabytes

input:
standard input

output:
standard output

Peter decided to wish happy birthday to his friend from Australia and send him a card. To make his present more mysterious, he decided to make a chain. Chain here is such a sequence of envelopes A?=?{a1,??a2,??...,??an}, where the width and the height of the i-th envelope is strictly higher than the width and the height of the (i??-??1)-th envelope respectively. Chain size is the number of envelopes in the chain. 

Peter wants to make the chain of the maximum size from the envelopes he has, the chain should be such, that he'll be able to put a card into it. The card fits into the chain if its width and height is lower than the width and the height of the smallest envelope in the chain respectively. It's forbidden to turn the card and the envelopes. 

Peter has very many envelopes and very little time, this hard task is entrusted to you.


Input

The first line contains integers n, w, h (1??≤?n?≤?5000, 1?≤?w,??h??≤?106) ― amount of envelopes Peter has, the card width and height respectively. Then there follow n lines, each of them contains two integer numbers wi and hi ― width and height of the i-th envelope (1?≤?wi,??hi?≤?106).


Output

In the first line print the maximum chain size. In the second line print the numbers of the envelopes (separated by space), forming the required chain, starting with the number of the smallest envelope. Remember, please, that the card should fit into the smallest envelope. If the chain of maximum size is not unique, print any of the answers.

If the card does not fit into any of the envelopes, print number 0 in the single line.


Sample test(s)



Input
2 1 12 22 2

Output
11 

 Input
3 3 35 412 119 8

Output
31 3 2 

思路：先排个序，然后最长递增子序列，记录
路径，递归输出。

#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int mm=1200000;
const int oo=1e9;
class node
{ public:
  int w,h,id;
}root[mm];
int dp[mm],p[mm];
int go_on;///记录排序完后，卡片的位置
bool cmpm(node a,node b)
{ if(a.w==b.w)
  return a.h<b.h;
  else return a.w<b.w;
}
void out(int n)
{ if(n==go_on)
   return;
  out(p[n]);
  cout<<root[n].id<<" ";
}
int main()
{
  int n,w,h;
  cin>>n>>w>>h;
  for(int i=1;i<=n;i++)
  {cin>>root[i].w>>root[i].h;root[i].id=i;}
  root[0].w=w;root[0].h=h;root[0].id=-1;
  sort(root,root+n+1,cmpm);
  memset(p,0,sizeof(p));
  for(int i=0;i<=n;i++)
  if(root[i].id==-1)///找到卡片
  {dp[i]=1;go_on=i;}   ///come_in记录入口
  int come_in=go_on,_max=1;///_max记录最优值
  for(int i=go_on;i<=n;i++)
  for(int j=go_on;j<i;j++)
  if(root[i].h>root[j].h&&root[i].w>root[j].w&&dp[j]&&dp[i]<dp[j]+1)
  {dp[i]=dp[j]+1;p[i]=j;if(dp[i]>_max)_max=dp[i],come_in=i;}///记录路径
  cout<<_max-1<<"\n";
  if(dp[come_in]-1)
  { out(come_in);
    cout<<"\n";
  }
}
另一种解法，直接深搜
#include <cstdio>

const int N = 10009;
int n, w[N], h[N], to[N], u[N], d[N];

int dfs(int v)
{
	if(u[v])
		return d[v];
	u[v] = 1;
	for (int i = 0; i < n; i++)
		if (h[i] > h[v] && w[i] > w[v])
			if (dfs(i) + 1 > d[v])
			{
				to[v] = i;
				d[v] = d[i] + 1;
			}
	return d[v];
}

int main ()
{
	scanf ("%d", &n);
	int i;n++;
	for (i = 0; i < n; i++)
	{
		scanf ("%d%d", w + i, h + i);
		to[i] = -1;
	}
	dfs(0);
	printf("%d\n", d[0]);
	for (i = to[0]; i != -1; i = to[i])
		printf("%d ", i);

	return 0;
}
