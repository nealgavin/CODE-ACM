Safe Or Unsafe
Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)
Total Submission(s): 863    Accepted Submission(s): 309



Problem Description

Javac++ 一天在看计算机的书籍的时候，看到了一个有趣的东西！每一串字符都可以被编码成一些数字来储存信息，但是不同的编码方式得到的储存空间是不一样的！并且当储存空间大于一定的值的时候是不安全的！所以Javac++ 就想是否有一种方式是可以得到字符编码最小的空间值！显然这是可以的，因为书上有这一块内容--哈夫曼编码(Huffman Coding)；一个字母的权值等于该字母在字符串中出现的频率。所以Javac++ 想让你帮忙，给你安全数值和一串字符串，并让你判断这个字符串是否是安全的？

 


Input

输入有多组case，首先是一个数字n表示有n组数据，然后每一组数据是有一个数值m(integer)，和一串字符串没有空格只有包含小写字母组成！

 


Output

如果字符串的编码值小于等于给定的值则输出yes，否则输出no。

 


Sample Input

2
12
helloworld
66
ithinkyoucandoit
 


Sample Output

no
yes
 


Source

HDU 2008-10 Programming Contest 




Recommend

gaojie


思路：就是纯哈夫曼编码，但我这有个简单的统计方法，受益于林大陈宇老师，网上好像没有这种方法。

          就是节点大于1个的哈夫曼树，哈夫曼编码和等于所构造出的二叉树的非叶子节点的和。


失误点：只有一个节点是根结点就是叶子节点，没有非叶子节点需要另外判断


具体代码

#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
const int oo=1e9;
int main()
{
 int cas,safe,sum,leaf;
 char s[123456];
 int num[28];
 while(cin>>cas)
 {
  while(cas--)
  {for(int i=0;i<27;i++)num[i]=0;
     sum=0;leaf=0;
   cin>>safe>>s;
   for(int i=0;s[i]!='\0';i++)
   num[s[i]-'a']++;///统计频率
   for(int i=0;i<27;i++)
   if(!num[i])num[i]=oo;///频率为0的将其变成无穷大
   else if(num[i])leaf+=num[i];///统计叶子节点
   sort(num,num+27);///排序
   while(num[0]!=oo)
   {
     for(int i=0;i<25;i++)
     if(num[i]&&num[i+1]!=oo)///最小两点值之和
     {
       sum+=num[i]+num[i+1];num[i+1]+=num[i];num[i]=oo;break;
     }
     else {sum+=num[i];num[i]=oo;break;}
     sort(num,num+26);
   }
   if(sum!=leaf)///当只有一个节点是叶子即是根，特殊处理
   sum-=leaf;///减去多余统计的叶子数
   if(sum<=safe)cout<<"yes\n";
   else cout<<"no\n";
  }
 }
}

