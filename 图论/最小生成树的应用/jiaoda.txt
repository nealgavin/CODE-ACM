#include<cmath>
#include<vector>
#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

const double INF = 1e13;
const int N = 1005;
int n, fa[N];
double k, g[N][N], x[N], y[N], dis[N], f[N][N], mark[N];
bool vis[N], isMST[N][N];

vector<int> edge[N];

double DFS(int u, int pa) {
    double mins = mark[u];
    for (int i = 0; i < (int)edge[u].size(); ++i) {
        int v = edge[u][i];
        if (v == pa) {
            continue;
        }
        mins = min(mins, DFS(v, u));
    }
    if (pa != -1) {
        f[pa][u] = f[u][pa] = min(f[pa][u], mins);
    }
    return mins;
}

int main() {
    int testcases;
    scanf("%d", &testcases);
    while (testcases--) {
        scanf("%d%lf", &n, &k);
        for (int i = 0; i < n; ++i) {
            scanf("%lf%lf", x + i, y + i);
            for (int j = 0; j < i; ++j) {
                g[i][j] = g[j][i] = sqrt((x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]));
            }
        }
        for (int i = 0; i < n; ++i) {
            vis[i] = false;
            fa[i] = -1;
            dis[i] = INF;
        }
        vis[0] = true;
        fa[0] = 0;
        for (int i = 1; i < n; ++i) {
            fa[i] = 0;
            dis[i] = g[0][i];
        }
        double MST = 0;
        for (int i = 1; i < n; ++i) {
            int best = -1;
            for (int j = 0; j < n; ++j) {
                if (!vis[j] && (best == -1 || dis[j] < dis[best])) {
                    best = j;
                }
            }
            vis[best] = true;
            MST += dis[best];
            for (int j = 0; j < n; ++j) {
                if (!vis[j] && dis[j] > g[best][j]) {
                    dis[j] = g[best][j];
                    fa[j] = best;
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                isMST[i][j] = false;
                f[i][j] = INF;
            }
        }
        for (int i = 1; i < n; ++i) {
            isMST[fa[i]][i] = isMST[i][fa[i]] = true;
        }
        for (int i = 0; i < n; ++i) {
            edge[i].clear();
        }
        for (int i = 1; i < n; ++i) {
            edge[fa[i]].push_back(i);
            edge[i].push_back(fa[i]);
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (j != i && !isMST[i][j]) {
                    mark[j] = g[i][j];
                } else {
                    mark[j] = INF;
                }
            }
            DFS(i, -1);
        } 
        double ans = MST;
        for (int i = 0; i < n; ++i) {
            if (fa[i]) {
                ans = max(ans, MST - g[fa[i]][i] + f[fa[i]][i]);
            }
        }
        printf("%.2f\n", ans * k);
    }
    return 0;
}

¡¢************************************
#include<iostream>
#include<cstring>
#include<cstdio>
#include<vector>
#include<cmath>
#define FOR(i,a,b) for(int i=a;i<=b;++i)
#define clr(f,z) memset(f,z,sizeof(f))
using namespace std;
const int mm=1000+9;
const double oo=1e30;
double g[mm][mm];
vector<int>ge[mm];
class Point
{
  public:double x,y;
}f[mm];
double dis[mm],ci[mm][mm],mark[mm];
int fa[mm];
int cas;
bool vis[mm],isMST[mm][mm];
int N,K;
double DFS(int u,int rt)
{ //puts("++");
  double _min=mark[u];
  for(int i=0;i<ge[u].size();++i)
  {
    int v=ge[u][i];
    if(v==rt)continue;
    _min=min(_min,DFS(v,u));
  }
  if(rt!=-1)
  {
    ci[rt][u]=ci[u][rt]=_min;
  }
  return _min;
}
double get_Dis(int i,int j)
{
  return sqrt((f[i].x-f[j].x)*(f[i].x-f[j].x)+(f[i].y-f[j].y)*(f[i].y-f[j].y));
}
int main()
{
  while(~scanf("%d",&cas))
  {
    while(cas--)
    {
      scanf("%d%d",&N,&K);
      FOR(i,1,N)
      {
        scanf("%lf%lf",&f[i].x,&f[i].y);
      }
      FOR(i,1,N)FOR(j,i+1,N)
      g[i][j]=g[j][i]=get_Dis(i,j);
//      puts("__");
      ///prim
      FOR(i,0,N)dis[i]=oo;
      clr(vis,0);clr(fa,0);//-1
      vis[1]=1; dis[1]=0;
      FOR(i,2,N)dis[i]=g[1][i];
      int best;double MAX,MST=0;

      FOR(i,2,N)
      {
        best=-1;MAX=oo;
        FOR(j,1,N)
        if(!vis[j]&&MAX>dis[j])
          best=j,MAX=dis[j];
         // if(best==-1)break;
        vis[best]=1;MST+=MAX;
        FOR(j,1,N)
        {
          if(!vis[j]&&g[best][j]<dis[j])
            dis[j]=g[best][j],fa[j]=best;
        }
      }
       cout<<MST<<endl;
      /*****************/
      FOR(i,1,N)FOR(j,1,N)
      isMST[i][j]=0,ci[i][j]=oo;
      puts("--");
      FOR(i,2,N)isMST[i][ fa[i] ]=isMST[ fa[i] ][i]=1;
      puts("++");
      FOR(i,1,N)ge[i].clear();
      FOR(i,2,N)ge[ fa[i] ].push_back(i),ge[i].push_back(fa[i]);
      FOR(i,1,N)
      {
        FOR(j,1,N)
        if(i!=j&&!isMST[i][j])
        {
         mark[j]=g[i][j];
        }
        else mark[j]=oo;
        DFS(i,-1);
      }
      double ans=MST;
      FOR(i,1,N)
      {
        ans=max(ans,MST-g[ fa[i] ][i]+ci[ fa[i] ][i]);
      }
      cout<<ans*K<<endl;
      printf("%.2lf\n",ans*K);
    }
  }
}
