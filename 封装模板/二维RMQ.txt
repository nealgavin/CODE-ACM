/*********************************************
二维RMQ
*********************************************/
#include<iostream>
#include<cstring>
#include<cstdio>
#define FOR(i,a,b) for(int i=a;i<=b;++i)
#define clr(f,z) memset(f,z,sizeof(f))
#define ll(x) (1<<x)
using namespace std;
const int mm=305;
int rmq[mm][mm][9][9];
int f[mm][mm],bit[mm];
int n,m;
void initRMQ()
{ bit[0]=-1;
  FOR(i,1,mm-1)bit[i]=(i&(i-1))==0?bit[i-1]+1:bit[i-1];
  FOR(i,1,n)FOR(j,1,m)
  rmq[i][j][0][0]=f[i][j];
  FOR(r,0,bit[n])FOR(c,0,bit[m])
  if(r+c)
  for(int i=1;i+ll(r)-1<=n;++i)
    for(int j=1;j+ll(c)-1<=m;++j)
    if(r!=0)
    rmq[i][j][r][c]=max(rmq[i][j][r-1][c],rmq[i+ll(r-1)][j][r-1][c]);
    else rmq[i][j][r][c]=max(rmq[i][j][r][c-1] ,rmq[i][j+ll(c-1)][r][c-1] );
}
int RMQ(int r1,int c1,int r2,int c2)
{
  int t1,t2;
  t1=bit[r2-r1+1];
  t2=bit[c2-c1+1];
  int a=max(rmq[r1][c1][t1][t2],rmq[r2-ll(t1)+1][c1][t1][t2]);
  int b=max(rmq[r1][c2-ll(t2)+1][t1][t2],rmq[r2-ll(t1)+1][c2-ll(t2)+1][t1][t2]);
  return max(a,b);
}
void in(int &a)
{
    char c;
    while((c=getchar())<'0'||c>'9');
    for(a=0;c>='0'&&c<='9';c=getchar())a=a*10+c-'0';
}
void out(int x)
{
    if(x>9)out(x/10);
    putchar(x%10+48);
}
int main()
{
  while(~scanf("%d%d",&n,&m))
  {
    FOR(i,1,n)FOR(j,1,m)
    in(f[i][j]);
    //scanf("%d",&f[i][j]);
    initRMQ();
    int Q;
    in(Q);
    //scanf("%d",&Q);
    while(Q--)
    {
      int r1,c1,r2,c2;
      //scanf("%d%d%d%d",&r1,&c1,&r2,&c2);
      in(r1);in(c1);in(r2);in(c2);
      int ans=RMQ(r1,c1,r2,c2);out(ans);
      if(f[r1][c1]==ans||f[r1][c2]==ans||f[r2][c1]==ans||f[r2][c2]==ans)
        printf(" yes\n");
      else printf(" no\n");
    }
  }
  return 0;
}
